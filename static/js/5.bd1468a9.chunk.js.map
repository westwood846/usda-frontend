{"version":3,"sources":["selectors.js","ErrorBoundary.js","Table/NutrientSelector.js","Table/TablePage.js","LinkButton.js"],"names":["cachedReports","state","app","reports","cachedReportsIds","createSelector","Object","keys","values","ErrorBoundary","props","error","errorInfo","console","this","hasError","children","React","Component","getInitialNutrientState","nutrients","reduce","acc","n","name","selected","includes","group","NutrientSelector","setNutrients","className","useState","selectedNutrients","setSelectedNutrients","groups","groupBy","useEffect","setAllInGroup","checked","mapValues","nutrient","set","toggleNutrient","css","map","groupNutrients","key","type","onChange","partial","length","LinkButton","onClick","colors","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","staticColumns","sortable","compact","selector","row","get","cell","to","desc","ndbno","TablePage","ids","cachedIds","getReport","compareSet","useDeepCompareEffect","difference","forEach","id","amount","useMemo","chain","flatMap","sortBy","groupOrderNumber","pick","_","uniq","value","dynamicColumns","filter","Number","format","getDatum","columns","sort","setSort","sortedReports","direction","reverse","reportIndices","report","indexOf","chartData","column","getReference","data","title","responsive","dense","onSort","width","height","strokeDasharray","dataKey","index","fill","mapDispatchToProps","connect","idsRaw","URLSearchParams","split","pivotNutrients","withRouter","styled","button"],"mappings":"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","file":"static/js/5.bd1468a9.chunk.js","sourcesContent":["import { createSelector } from \"reselect\";\n\nexport const cachedReports = (state) => state.app.reports;\nexport const cachedReportsIds = createSelector([cachedReports], Object.keys);\nexport const cachedReportsAsArray = createSelector(\n  [cachedReports],\n  Object.values\n);\n","import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { error };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <code>error in subtree</code>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useState, useEffect } from \"react\";\nimport { css } from \"emotion\";\n\nimport { groupBy, map, mapValues, set, partial } from \"lodash\";\n\nimport LinkButton from \"../LinkButton\";\n\nconst getInitialNutrientState = (nutrients) =>\n  nutrients.reduce(\n    (acc, n) => ({\n      ...acc,\n      [n.name]: { selected: [\"Proximates\"].includes(n.group), ...n },\n    }),\n    {}\n  );\n\nconst NutrientSelector = ({ nutrients, setNutrients, className, ...props }) => {\n  const [selectedNutrients, setSelectedNutrients] = useState(\n    getInitialNutrientState(nutrients)\n  );\n\n  const groups = groupBy(Object.values(selectedNutrients), \"group\");\n\n  useEffect(() => {\n    setSelectedNutrients((selectedNutrients) => ({\n      ...getInitialNutrientState(nutrients),\n      ...selectedNutrients,\n    }));\n  }, [nutrients]);\n\n  useEffect(() => {\n    setNutrients(Object.values(selectedNutrients));\n  }, [selectedNutrients, setNutrients]);\n\n  const setAllInGroup = (group, checked) => {\n    setSelectedNutrients(\n      mapValues(selectedNutrients, (nutrient) =>\n        nutrient.group === group ? set(nutrient, \"selected\", checked) : nutrient\n      )\n    );\n  };\n\n  const toggleNutrient = (name) =>\n    setSelectedNutrients((selectedNutrients) => ({\n      ...selectedNutrients,\n      [name]: {\n        ...selectedNutrients[name],\n        selected: !selectedNutrients[name].selected,\n      },\n    }));\n\n  return (\n    <div\n      className={\n        css`\n          display: flex;\n          flex-direction: row;\n        ` + ` ${className}`\n      }\n      {...props}\n    >\n      {map(groups, (groupNutrients, group) => (\n        <div\n          key={group}\n          className={css`\n            display: flex;\n            flex-direction: column;\n            margin-right: 1rem;\n            min-width: 200px;\n          `}\n        >\n          <h4>{group}</h4>\n          <hr />\n          {map(groupNutrients, ({ name }) => (\n            <label key={name}>\n              <input\n                type=\"checkbox\"\n                name={name}\n                checked={\n                  selectedNutrients[name] && selectedNutrients[name].selected\n                }\n                onChange={partial(toggleNutrient, name)}\n              />\n              {name}\n            </label>\n          ))}\n          {groupNutrients.length > 1 && (\n            <div\n              className={css`\n                margin-top: 1rem;\n              `}\n            >\n              <LinkButton onClick={partial(setAllInGroup, group, true)}>\n                Select All\n              </LinkButton>{\" \"}\n              &middot;{\" \"}\n              <LinkButton onClick={partial(setAllInGroup, group, false)}>\n                Select None\n              </LinkButton>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default NutrientSelector;\n","import React, { useMemo, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport useDeepCompareEffect from \"use-deep-compare-effect\";\nimport { css } from \"emotion\";\nimport { withRouter, Link } from \"react-router-dom\";\n\nimport red from \"@material-ui/core/colors/red\";\nimport pink from \"@material-ui/core/colors/pink\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport deepPurple from \"@material-ui/core/colors/deepPurple\";\nimport indigo from \"@material-ui/core/colors/indigo\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\nimport cyan from \"@material-ui/core/colors/cyan\";\nimport teal from \"@material-ui/core/colors/teal\";\n\nimport {\n  reduce,\n  get,\n  difference,\n  pick,\n  chain,\n  partial,\n  sortBy,\n  indexOf,\n  default as _,\n} from \"lodash\";\n\nimport DataTable from \"react-data-table-component\";\n\nimport { getReport, compareSet } from \"../actions\";\nimport { cachedReportsIds, cachedReports } from \"../selectors\";\nimport {\n  pivotNutrients,\n  groupOrderNumber,\n  getDatum,\n  getReference,\n} from \"../usda\";\nimport ErrorBoundary from \"../ErrorBoundary\";\nimport NutrientSelector from \"./NutrientSelector\";\nimport {\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst colors = [\n  red[300],\n  pink[300],\n  purple[300],\n  deepPurple[300],\n  indigo[300],\n  blue[300],\n  lightBlue[300],\n  cyan[300],\n  teal[300],\n];\n\nconst staticColumns = [\n  {\n    name: \"Name\",\n    sortable: true,\n    compact: true,\n    selector: (row) => get(row, \"desc.name\"),\n    cell: (row) => (\n      <Link to={`/report/${row.desc.ndbno}`}>{row.desc.name}</Link>\n    ),\n  },\n  // {\n  //   name: \"ndbno\",\n  //   selector: \"desc.ndbno\",\n  //   sortable: true,\n  //   compact: true,\n  // },\n];\n\nexport const TablePage = ({\n  ids,\n  cachedIds,\n  reports,\n  getReport,\n  compareSet,\n}) => {\n  useDeepCompareEffect(() => {\n    const idsToGet = difference(ids, cachedIds);\n    idsToGet.forEach(getReport);\n  }, [ids, cachedIds, getReport]);\n  useDeepCompareEffect(() => {\n    compareSet(ids.map((id) => ({ ndbno: id, amount: 100 })));\n  }, [ids, compareSet]);\n\n  const nutrients = useMemo(() => {\n    return chain(reports)\n      .map(\"nutrients\")\n      .flatMap(Object.values)\n      .sortBy(groupOrderNumber)\n      .map(partial(pick, _, [\"name\", \"group\"]))\n      .uniq()\n      .value();\n  }, [reports]);\n\n  const [selectedNutrients, setSelectedNutrients] = useState(null);\n\n  const dynamicColumns = chain(selectedNutrients)\n    .filter(\"selected\")\n    .map((nutrient) => ({\n      name: nutrient.name,\n      selector: (row) =>\n        Number(get(row, [\"nutrients\", nutrient.name, \"value\"])),\n      format: (row) => getDatum(row, nutrient.name, 1, 2),\n      sortable: true,\n      compact: true,\n    }))\n    .value();\n\n  const columns = [...staticColumns, ...dynamicColumns];\n\n  const [sort, setSort] = useState();\n\n  let sortedReports = sort ? sortBy(reports, sort.selector) : reports;\n  if (sort && sort.direction !== \"asc\") {\n    sortedReports = sortedReports.reverse();\n  }\n  const reportIndices = reports.reduce(\n    (acc, report) => ({\n      ...acc,\n      [report.desc.ndbno]: indexOf(sortedReports, report),\n    }),\n    {}\n  );\n\n  const chartData = chain(dynamicColumns)\n    .map((column) => ({\n      name: column.name,\n      ...reduce(\n        reports,\n        (acc, report) => ({\n          ...acc,\n          [reportIndices[report.desc.ndbno]]: getReference(\n            column.name,\n            report,\n            1,\n            2\n          ),\n        }),\n        {}\n      ),\n    }))\n    .value();\n\n  return (\n    <div\n      className={css`\n        padding: 2rem 1rem;\n      `}\n    >\n      <NutrientSelector\n        nutrients={nutrients}\n        setNutrients={setSelectedNutrients}\n        className={css`\n          margin-top: 2rem;\n        `}\n      />\n      <ErrorBoundary>\n        <DataTable\n          columns={columns}\n          data={reports}\n          title=\"Reports\"\n          responsive\n          dense\n          onSort={(sort, direction) => setSort({ ...sort, direction })}\n        />\n      </ErrorBoundary>\n      <ResponsiveContainer\n        width=\"100%\"\n        height={300}\n        className={css`\n          margin-top: 2rem;\n        `}\n      >\n        <BarChart data={chartData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          {sortedReports.map((report, index) => (\n            <Bar\n              key={index}\n              dataKey={index}\n              name={sortedReports[index].desc.name}\n              fill={colors[reports.indexOf(report) % colors.length]}\n            />\n          ))}\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nTablePage.propTypes = {\n  ids: PropTypes.arrayOf(PropTypes.string),\n  cachedIds: PropTypes.arrayOf(PropTypes.string),\n  reports: PropTypes.arrayOf(PropTypes.object),\n  getReport: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => {\n  const idsRaw = new URLSearchParams(\n    get(state, \"router.location.search\", \"\")\n  ).get(\"ids\");\n  const ids = idsRaw ? idsRaw.split(\",\") : [];\n  return {\n    cachedIds: cachedReportsIds(state),\n    ids,\n    reports: Object.values(pick(cachedReports(state), ids)).map(pivotNutrients),\n  };\n};\n\nconst mapDispatchToProps = {\n  getReport,\n  compareSet,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(TablePage));\n","import styled from \"@emotion/styled\";\n\nexport const LinkButton = styled.button`\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  display: inline;\n  margin: 0;\n  padding: 0;\n  color: #5e5e5e;\n\n  &:hover {\n    color: #f06292;\n  }\n`;\n\nexport default LinkButton;\n"],"sourceRoot":""}
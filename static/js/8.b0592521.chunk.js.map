{"version":3,"sources":["Report/ProximatesChart.js","Report/Comparator.js","Report/Analysis.js","Report/Report.js","Report/Loading.js","Report/ReportPage.js"],"names":["ProximatesChart","report","mass","getValue","key","getNutrientValue","totalFat","totalCarbs","protein","water","other","data01","name","value","saturatedFats","polySaturatedFats","monoSaturatedFats","otherFats","dietaryFiber","sugar","data02","colors","yellow","lightGreen","pink","lightBlue","grey","legend","map","entry","index","color","width","height","data","dataKey","cx","cy","innerRadius","outerRadius","fill","isAnimationActive","labelLine","label","props","midAngle","percent","sliceWideEnough","RADIAN","Math","PI","radius","x","cos","y","sin","Intl","NumberFormat","maximumFractionDigits","format","textAnchor","dominantBaseline","flatten","position","payload","Comparator","calories","bananas","round","apples","bread","bubbleTeas","className","times","constant","connect","state","app","nutrients","find","nutrient","factor","datum","precision","getDatum","datumCell","main","referenceCell","getReference","reference","doubleTable","datumCells","labels","referenceCells","datumCellChucks","chunk","referenceCellChucks","datumCellChunk","sortNutrientsByGroup","nutrientGroups","groupByNutrientGroup","row","getNutrient","tableRow","Loading","css","ReportPage","match","getReport","compareInsert","setMass","loaded","get","ds","manu","ndbno","urlNDBNO","params","useEffect","console","log","sliderPrecision","onClick","filter","e","join","to","min","max","step","onChange","_event","valueLabelFormat","mapDispatchToProps","isUndefined","getReportResult"],"mappings":"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","file":"static/js/8.b0592521.chunk.js","sourcesContent":["import React from \"react\";\nimport { PieChart, Pie, Cell, Label, Legend } from \"recharts\";\nimport { getNutrientValue } from \"../usda\";\nimport { flatten } from \"lodash\";\n\nimport yellow from \"@material-ui/core/colors/yellow\";\nimport lightGreen from \"@material-ui/core/colors/lightGreen\";\nimport pink from \"@material-ui/core/colors/pink\";\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const ProximatesChart = ({ report, mass }) => {\n  const getValue = (key) => (getNutrientValue(report, key) * mass) / 100;\n\n  let totalFat = getValue(\"Total lipid (fat)\");\n  let totalCarbs = getValue(\"Carbohydrate, by difference\");\n  let protein = getValue(\"Protein\");\n  let water = getValue(\"Water\");\n  let other = mass - (totalFat + totalCarbs + protein + water);\n\n  const data01 = [\n    { name: \"Total Fat\", value: totalFat },\n    { name: \"Total Carbs\", value: totalCarbs },\n    { name: \"Protein\", value: protein },\n    { name: \"Water\", value: water },\n    { name: \"Other\", value: other },\n  ];\n\n  let saturatedFats = getValue(\"Fatty acids, total saturated\");\n  let polySaturatedFats = getValue(\"Fatty acids, total polyunsaturated\");\n  let monoSaturatedFats = getValue(\"Fatty acids, total monounsaturated\");\n  let otherFats =\n    totalFat - saturatedFats - polySaturatedFats - monoSaturatedFats;\n\n  let dietaryFiber = getValue(\"Fiber, total dietary\");\n  let sugar = getValue(\"Sugars, total\");\n  let otherCarbs = totalCarbs - dietaryFiber - sugar;\n\n  const data02 = [\n    { name: \"Polyunsat. Fat\", value: polySaturatedFats },\n    { name: \"Monounsat. Fat\", value: monoSaturatedFats },\n    { name: \"Saturated Fat\", value: saturatedFats },\n    { name: \"Other Fats\", value: otherFats },\n    { name: \"Dietary Fiber\", value: dietaryFiber },\n    { name: \"Sugar\", value: sugar },\n    { name: \"Other Carbs\", value: otherCarbs },\n    { name: \"Protein\", value: protein },\n    { name: \"Water\", value: water },\n    { name: \"Other\", value: other },\n  ];\n\n  let sliceWideEnough = (props) => {\n    return props.percent > 0.03;\n  };\n\n  let label = (props) => {\n    let {\n      cx,\n      cy,\n      midAngle,\n      innerRadius,\n      outerRadius,\n      value,\n      index,\n      fill,\n    } = props;\n\n    if (!sliceWideEnough(props)) return null;\n\n    const RADIAN = Math.PI / 180;\n    const radius = 10 + innerRadius + (outerRadius - innerRadius);\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n    value = new Intl.NumberFormat(\"en-IN\", {\n      maximumFractionDigits: 1,\n    }).format(value);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill={fill}\n        textAnchor={x > cx ? \"start\" : \"end\"}\n        dominantBaseline=\"central\"\n      >\n        {data02[index].name} {value} g\n      </text>\n    );\n  };\n\n  let colors = [\n    [yellow[500], yellow[700], yellow[800], yellow[300]], // fats\n    [lightGreen[500], lightGreen[700], lightGreen[300]], // carbs\n    [pink[700]], // protein\n    [lightBlue[500]], // water\n    [grey[300]], // other\n  ];\n\n  let legend = data01.map((entry, index) => ({\n    value: entry.name,\n    color: colors[index][0],\n  }));\n\n  return (\n    <PieChart width={500} height={275}>\n      <Pie\n        data={data01}\n        dataKey=\"value\"\n        cx={250}\n        cy={125}\n        innerRadius={30}\n        outerRadius={60}\n        fill=\"#8884d8\"\n        isAnimationActive={false}\n      >\n        {data01.map((entry, index) => (\n          <Cell key={index} fill={colors[index][0]} />\n        ))}\n      </Pie>\n      <Pie\n        data={data02}\n        dataKey=\"value\"\n        cx={250}\n        cy={125}\n        innerRadius={70}\n        outerRadius={90}\n        fill=\"red\"\n        labelLine={false}\n        label={label}\n        isAnimationActive={false}\n      >\n        {data02.map((entry, index) => (\n          <Cell key={`index`} fill={flatten(colors)[index]} />\n        ))}\n        <Label value={`${mass} g`} position=\"center\" />\n      </Pie>\n      <Legend payload={legend} />\n    </PieChart>\n  );\n};\n\nexport default ProximatesChart;\n","import React from \"react\";\n\nimport { times, constant } from \"lodash\";\n\nconst BANANA_FACTOR = 105;\nconst APPLE_FACTOR = 95;\nconst BREAD_FACTOR = 67;\nconst BUBBLE_TEA_FACTOR = 350;\n\nexport const Comparator = ({ calories }) => {\n  const bananas = Math.round(calories / BANANA_FACTOR);\n  const apples = Math.round(calories / APPLE_FACTOR);\n  const bread = Math.round(calories / BREAD_FACTOR);\n  const bubbleTeas = Math.round(calories / BUBBLE_TEA_FACTOR);\n\n  return (\n    <div className=\"Comparator\">\n      <div className=\"Comparator-header\">\n        <h2>{calories} kcal</h2>\n        <br />\n        equal\n      </div>\n      <div className=\"emoji-comparator\">\n        {times(bubbleTeas, constant(\"🍹\"))}\n        <br />\n        {bubbleTeas} Cups of Bubble Tea\n      </div>\n      <div className=\"emoji-comparator\">\n        {times(bananas, constant(\"🍌\"))}\n        <br />\n        {bananas} Medium Bananas (118g)\n      </div>\n      <div className=\"emoji-comparator\">\n        {times(apples, constant(\"🍎\"))}\n        <br />\n        {apples} Apples (182g)\n      </div>\n      <div className=\"emoji-comparator\">\n        {times(bread, constant(\"🍞\"))}\n        <br />\n        {bread} Slices of White Bread (28g)\n      </div>\n    </div>\n  );\n};\n\nexport default Comparator;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport ProximatesChart from \"./ProximatesChart\";\nimport Comparator from \"./Comparator\";\n\nexport const Analysis = ({ report, mass }) => {\n  const calories =\n    (report.nutrients.find((nutrient) => nutrient.name === \"Energy\").value *\n      mass) /\n    100;\n\n  return (\n    <div className=\"Analysis\">\n      <ProximatesChart report={report} mass={mass} />\n      <Comparator calories={calories} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  mass: state.app.mass,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Analysis);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { chunk } from \"lodash\";\n\nimport {\n  sortNutrientsByGroup,\n  groupByNutrientGroup,\n  getNutrient,\n  labels,\n  getDatum,\n  getReference,\n} from \"../usda\";\n\nexport const Report = ({ report, factor }) => {\n  const datum = (key, precision) => getDatum(report, key, factor, precision);\n\n  const reference = (key) => `${getReference(key, report, factor)}%`;\n\n  const datumCell = (key, label = key, main) => (\n    <td className={`nutTable-left ${!main && \"indent-2\"}`}>\n      {main ? <strong>{label} </strong> : label + \" \"}\n      {datum(key)}\n    </td>\n  );\n  const referenceCell = (key) => (\n    <td className=\"nutTable-right\">{reference(key)}</td>\n  );\n\n  const tableRow = (index, key, label = key, main = false) => {\n    if (getNutrient(report, key)) {\n      return (\n        <tr key={index}>\n          {datumCell(key, label, main)}\n          {referenceCell(key)}\n        </tr>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const doubleTable = (nutrients) => {\n    let datumCells = nutrients.map((nutrient) =>\n      datumCell(nutrient.name, labels[nutrient.name], true)\n    );\n    let referenceCells = nutrients.map((nutrient) =>\n      referenceCell(nutrient.name)\n    );\n\n    let datumCellChucks = chunk(datumCells, 2);\n    let referenceCellChucks = chunk(referenceCells, 2);\n\n    return (\n      <table className=\"nutTable\">\n        <tbody>\n          {datumCellChucks.map((datumCellChunk, index) => (\n            <tr key={index}>\n              {datumCellChucks[index][0]}\n              {referenceCellChucks[index][0]}\n              {datumCellChucks[index][1] || <td className=\"nutTable-left\"></td>}\n              {referenceCellChucks[index][1] || (\n                <td className=\"nutTable-right\"></td>\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  const tableRows = [\n    { label: \"Calories\", key: \"Energy\", main: true },\n    { label: \"Total Fat\", key: \"Total lipid (fat)\", main: true },\n    {\n      label: \"Saturated fat\",\n      key: \"Fatty acids, total saturated\",\n      main: false,\n    },\n    {\n      label: \"Polyunsaturated fat\",\n      key: \"Fatty acids, total polyunsaturated\",\n      main: false,\n    },\n    {\n      label: \"Monounsaturated fat\",\n      key: \"Fatty acids, total monounsaturated\",\n      main: false,\n    },\n    { label: \"Water\", key: \"Water\", main: true },\n    { label: \"Cholesterol\", key: \"Cholesterol\", main: true },\n    { label: \"Sodium\", key: \"Sodium, Na\", main: true },\n    { label: \"Potassium\", key: \"Potassium, K\", main: true },\n    {\n      label: \"Total Carbohydrate\",\n      key: \"Carbohydrate, by difference\",\n      main: true,\n    },\n    { label: \"Dietary fiber\", key: \"Fiber, total dietary\", main: false },\n    { label: \"Sugar\", key: \"Sugars, total\", main: false },\n    { label: \"Protein\", key: \"Protein\", main: true },\n  ];\n\n  const nutrients = sortNutrientsByGroup(report.nutrients);\n  const nutrientGroups = groupByNutrientGroup(nutrients);\n\n  return (\n    <div className=\"Report\">\n      <table className=\"nutTable\">\n        <tbody>\n          {tableRows.map((row, index) =>\n            tableRow(index, row.key, row.label, row.main)\n          )}\n        </tbody>\n      </table>\n      {nutrientGroups[\"Vitamins\"] && doubleTable(nutrientGroups[\"Vitamins\"])}\n      {nutrientGroups[\"Minerals\"] && doubleTable(nutrientGroups[\"Minerals\"])}\n      {nutrientGroups[\"Other\"] && doubleTable(nutrientGroups[\"Other\"])}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  mass: state.app.mass,\n  factor: state.app.mass / 100,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Report);\n","import React from \"react\";\nimport { css } from \"emotion\";\n\nconst Loading = (props) => {\n  return (\n    <div\n      className={css`\n        margin-top: 2rem;\n        margin-left: 2rem;\n        border: 8px solid #f06292;\n        border-top: 8px solid transparent; /* Blue */\n        border-radius: 50%;\n        width: 80px;\n        height: 80px;\n        animation: spin 1s linear infinite;\n\n        @keyframes spin {\n          0% {\n            transform: rotate(0deg);\n          }\n          100% {\n            transform: rotate(360deg);\n          }\n        }\n      `}\n    >\n      Loading\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport InputRange from \"@material-ui/core/Slider\";\nimport \"react-input-range/lib/css/index.css\";\nimport { get, isUndefined } from \"lodash\";\n\nimport Analysis from \"./Analysis\";\nimport Report from \"./Report\";\nimport Loading from \"./Loading\";\n\nimport { getReport, setMass, compareInsert } from \"../actions\";\n\nexport const ReportPage = ({\n  match,\n  report,\n  getReport,\n  compareInsert,\n  setMass,\n  mass,\n  loaded,\n}) => {\n  const { name, ds, manu, ndbno } = get(report, \"desc\", {});\n  const urlNDBNO = match.params.ndbno;\n\n  useEffect(() => {\n    console.log(\"ee\");\n    getReport(urlNDBNO);\n  }, [urlNDBNO, getReport]);\n\n  const sliderPrecision = (() => {\n    if (mass < 25) return 1;\n    if (mass < 100) return 5;\n    if (mass < 500) return 10;\n    return 50;\n  })();\n\n  return (\n    <div className=\"ReportPage\">\n      <div className=\"header\">\n        <div>\n          <h1>\n            {loaded ? `${name}` : `Loading report for ndbno ${urlNDBNO}`}\n            <button onClick={() => compareInsert(ndbno, mass)}>Compare</button>\n          </h1>\n          <div className=\"descriptor\">\n            {loaded && (\n              <small>{[ds, manu, ndbno].filter((e) => e).join(\" · \")}</small>\n            )}\n          </div>\n          <Link to=\"/search/\" className=\"newSearchLink\">\n            &#8592; New Search\n          </Link>\n          <InputRange\n            min={0}\n            max={1000}\n            step={sliderPrecision}\n            value={mass}\n            onChange={(_event, value) => setMass(value)}\n            valueLabelFormat={(value) => `Mass ${value} g`}\n          />\n        </div>\n      </div>\n      {loaded ? (\n        <div className=\"ReportPage-container\">\n          <div className=\"ReportPage-report\">\n            <Report report={report} />\n          </div>\n          <div className=\"ReportPage-analysis\">\n            <Analysis report={report} />\n          </div>\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  loaded: !isUndefined(state.app.getReportResult),\n  report: state.app.getReportResult,\n  mass: state.app.mass,\n});\n\nconst mapDispatchToProps = {\n  getReport,\n  setMass,\n  compareInsert,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReportPage);\n"],"sourceRoot":""}
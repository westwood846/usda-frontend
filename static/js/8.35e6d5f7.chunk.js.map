{"version":3,"sources":["Report/Breadcrumbs.js","Report/ProximatesChart.js","Report/Comparator.js","Report/Analysis.js","Report/Report.js","Report/Loading.js","Report/ReportPage.js"],"names":["Breadcrumbs","fragments","this","props","name","split","className","map","fragment","index","key","to","pathname","search","slice","join","dataSource","Component","connect","state","app","searchDataSource","ProximatesChart","report","mass","getValue","getNutrientValue","totalFat","totalCarbs","protein","water","other","data01","value","saturatedFats","polySaturatedFats","monoSaturatedFats","otherFats","dietaryFiber","sugar","data02","colors","yellow","lightGreen","pink","lightBlue","grey","legend","entry","color","width","height","data","dataKey","cx","cy","innerRadius","outerRadius","fill","isAnimationActive","labelLine","label","midAngle","percent","sliceWideEnough","RADIAN","Math","PI","radius","x","cos","y","sin","Intl","NumberFormat","maximumFractionDigits","format","textAnchor","dominantBaseline","flatten","position","payload","Comparator","bananas","round","calories","apples","bread","bubbleTeas","times","n","Analysis","nutrients","find","nutrient","Report","datum","precision","getDatum","factor","reference","getReference","datumCell","main","referenceCell","tableRow","getNutrient","doubleTable","datumCells","labels","referenceCells","datumCellChucks","chunk","referenceCellChucks","datumCellChunk","tableRows","sortNutrientsByGroup","nutrientGroups","groupByNutrientGroup","row","Loading","css","ReportPage","match","getReport","compareInsert","setMass","loaded","get","ds","manu","ndbno","urlNDBNO","params","useEffect","console","log","sliderPrecision","onClick","filter","e","min","max","step","onChange","_event","valueLabelFormat","mapDispatchToProps","isUndefined","getReportResult"],"mappings":"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","file":"static/js/8.35e6d5f7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nclass Breadcrumbs extends Component {\n  render() {\n    let fragments = this.props.name.split(\", \");\n    return (\n      <div className=\"Breadcrumbs\">\n        {fragments.map((fragment, index, fragments) => (\n          <span key={index}>\n            &nbsp;/&nbsp;\n            <Link\n              to={{\n                pathname: \"/search\",\n                search: `?query=${fragments\n                  .slice(0, index + 1)\n                  .join(\", \")}&dataSource=${this.props.dataSource}`,\n              }}\n              className=\"Breadcrumbs-item\"\n            >\n              {fragment}\n            </Link>\n          </span>\n        ))}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  dataSource: state.app.searchDataSource,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Breadcrumbs);\n","import React from \"react\";\nimport { PieChart, Pie, Cell, Label, Legend } from \"recharts\";\nimport { getNutrientValue } from \"../usda\";\nimport { flatten } from \"lodash\";\n\nimport yellow from \"@material-ui/core/colors/yellow\";\nimport lightGreen from \"@material-ui/core/colors/lightGreen\";\nimport pink from \"@material-ui/core/colors/pink\";\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\nimport grey from \"@material-ui/core/colors/grey\";\n\nexport const ProximatesChart = ({ report, mass }) => {\n  const getValue = (key) => (getNutrientValue(report, key) * mass) / 100;\n\n  let totalFat = getValue(\"Total lipid (fat)\");\n  let totalCarbs = getValue(\"Carbohydrate, by difference\");\n  let protein = getValue(\"Protein\");\n  let water = getValue(\"Water\");\n  let other = mass - (totalFat + totalCarbs + protein + water);\n\n  const data01 = [\n    { name: \"Total Fat\", value: totalFat },\n    { name: \"Total Carbs\", value: totalCarbs },\n    { name: \"Protein\", value: protein },\n    { name: \"Water\", value: water },\n    { name: \"Other\", value: other },\n  ];\n\n  let saturatedFats = getValue(\"Fatty acids, total saturated\");\n  let polySaturatedFats = getValue(\"Fatty acids, total polyunsaturated\");\n  let monoSaturatedFats = getValue(\"Fatty acids, total monounsaturated\");\n  let otherFats =\n    totalFat - saturatedFats - polySaturatedFats - monoSaturatedFats;\n\n  let dietaryFiber = getValue(\"Fiber, total dietary\");\n  let sugar = getValue(\"Sugars, total\");\n  let otherCarbs = totalCarbs - dietaryFiber - sugar;\n\n  const data02 = [\n    { name: \"Polyunsat. Fat\", value: polySaturatedFats },\n    { name: \"Monounsat. Fat\", value: monoSaturatedFats },\n    { name: \"Saturated Fat\", value: saturatedFats },\n    { name: \"Other Fats\", value: otherFats },\n    { name: \"Dietary Fiber\", value: dietaryFiber },\n    { name: \"Sugar\", value: sugar },\n    { name: \"Other Carbs\", value: otherCarbs },\n    { name: \"Protein\", value: protein },\n    { name: \"Water\", value: water },\n    { name: \"Other\", value: other },\n  ];\n\n  let sliceWideEnough = (props) => {\n    return props.percent > 0.03;\n  };\n\n  let label = (props) => {\n    let {\n      cx,\n      cy,\n      midAngle,\n      innerRadius,\n      outerRadius,\n      value,\n      index,\n      fill,\n    } = props;\n\n    if (!sliceWideEnough(props)) return null;\n\n    const RADIAN = Math.PI / 180;\n    const radius = 10 + innerRadius + (outerRadius - innerRadius);\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n    value = new Intl.NumberFormat(\"en-IN\", {\n      maximumFractionDigits: 1,\n    }).format(value);\n\n    return (\n      <text\n        x={x}\n        y={y}\n        fill={fill}\n        textAnchor={x > cx ? \"start\" : \"end\"}\n        dominantBaseline=\"central\"\n      >\n        {data02[index].name} {value} g\n      </text>\n    );\n  };\n\n  let colors = [\n    [yellow[500], yellow[700], yellow[800], yellow[300]], // fats\n    [lightGreen[500], lightGreen[700], lightGreen[300]], // carbs\n    [pink[700]], // protein\n    [lightBlue[500]], // water\n    [grey[300]], // other\n  ];\n\n  let legend = data01.map((entry, index) => ({\n    value: entry.name,\n    color: colors[index][0],\n  }));\n\n  return (\n    <PieChart width={500} height={275}>\n      <Pie\n        data={data01}\n        dataKey=\"value\"\n        cx={250}\n        cy={125}\n        innerRadius={30}\n        outerRadius={60}\n        fill=\"#8884d8\"\n        isAnimationActive={false}\n      >\n        {data01.map((entry, index) => (\n          <Cell key={index} fill={colors[index][0]} />\n        ))}\n      </Pie>\n      <Pie\n        data={data02}\n        dataKey=\"value\"\n        cx={250}\n        cy={125}\n        innerRadius={70}\n        outerRadius={90}\n        fill=\"red\"\n        labelLine={false}\n        label={label}\n        isAnimationActive={false}\n      >\n        {data02.map((entry, index) => (\n          <Cell key={`index`} fill={flatten(colors)[index]} />\n        ))}\n        <Label value={`${mass} g`} position=\"center\" />\n      </Pie>\n      <Legend payload={legend} />\n    </PieChart>\n  );\n};\n\nexport default ProximatesChart;\n","import React, { Component } from \"react\";\nimport { times } from \"lodash\";\n\nconst BANANA_FACTOR = 105;\nconst APPLE_FACTOR = 95;\nconst BREAD_FACTOR = 67;\nconst BUBBLE_TEA_FACTOR = 350;\n\nclass Comparator extends Component {\n  render() {\n    let bananas = Math.round(this.props.calories / BANANA_FACTOR);\n    let apples = Math.round(this.props.calories / APPLE_FACTOR);\n    let bread = Math.round(this.props.calories / BREAD_FACTOR);\n    let bubbleTeas = Math.round(this.props.calories / BUBBLE_TEA_FACTOR);\n\n    return (\n      <div className=\"Comparator\">\n        <div className=\"Comparator-header\">\n          <h2>{this.props.calories} kcal</h2>\n          <br />\n          equal\n        </div>\n        <div className=\"emoji-comparator\">\n          {times(bubbleTeas, (n) => \"🍹\")}\n          <br />\n          {bubbleTeas} Cups of Bubble Tea\n        </div>\n        <div className=\"emoji-comparator\">\n          {times(bananas, (n) => \"🍌\")}\n          <br />\n          {bananas} Medium Bananas (118g)\n        </div>\n        <div className=\"emoji-comparator\">\n          {times(apples, (n) => \"🍎\")}\n          <br />\n          {apples} Apples (182g)\n        </div>\n        <div className=\"emoji-comparator\">\n          {times(bread, (n) => \"🍞\")}\n          <br />\n          {bread} Slices of White Bread (28g)\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Comparator;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport ProximatesChart from \"./ProximatesChart\";\nimport Comparator from \"./Comparator\";\n\nclass Analysis extends Component {\n  render() {\n    let calories =\n      (this.props.report.nutrients.find(\n        (nutrient) => nutrient.name === \"Energy\"\n      ).value *\n        this.props.mass) /\n      100;\n\n    return (\n      <div className=\"Analysis\">\n        <ProximatesChart report={this.props.report} mass={this.props.mass} />\n        <Comparator calories={calories} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  mass: state.app.mass,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Analysis);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  sortNutrientsByGroup,\n  groupByNutrientGroup,\n  getNutrient,\n  labels,\n  getDatum,\n  getReference,\n} from \"../usda\";\nimport { chunk } from \"lodash\";\n\nclass Report extends Component {\n  datum = (key, precision) =>\n    getDatum(this.props.report, key, this.props.factor, precision);\n\n  reference = (key) =>\n    `${getReference(key, this.props.report, this.props.factor)}%`;\n\n  datumCell = (key, label = key, main) => (\n    <td className={`nutTable-left ${!main && \"indent-2\"}`}>\n      {main ? <strong>{label} </strong> : label + \" \"}\n      {this.datum(key)}\n    </td>\n  );\n  referenceCell = (key) => (\n    <td className=\"nutTable-right\">{this.reference(key)}</td>\n  );\n\n  tableRow = (index, key, label = key, main = false) => {\n    if (getNutrient(this.props.report, key)) {\n      return (\n        <tr key={index}>\n          {this.datumCell(key, label, main)}\n          {this.referenceCell(key)}\n        </tr>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  doubleTable = (nutrients) => {\n    let datumCells = nutrients.map((nutrient) =>\n      this.datumCell(nutrient.name, labels[nutrient.name], true)\n    );\n    let referenceCells = nutrients.map((nutrient) =>\n      this.referenceCell(nutrient.name)\n    );\n\n    let datumCellChucks = chunk(datumCells, 2);\n    let referenceCellChucks = chunk(referenceCells, 2);\n\n    return (\n      <table className=\"nutTable\">\n        <tbody>\n          {datumCellChucks.map((datumCellChunk, index) => (\n            <tr key={index}>\n              {datumCellChucks[index][0]}\n              {referenceCellChucks[index][0]}\n              {datumCellChucks[index][1] || <td className=\"nutTable-left\"></td>}\n              {referenceCellChucks[index][1] || (\n                <td className=\"nutTable-right\"></td>\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  tableRows = [\n    { label: \"Calories\", key: \"Energy\", main: true },\n    { label: \"Total Fat\", key: \"Total lipid (fat)\", main: true },\n    {\n      label: \"Saturated fat\",\n      key: \"Fatty acids, total saturated\",\n      main: false,\n    },\n    {\n      label: \"Polyunsaturated fat\",\n      key: \"Fatty acids, total polyunsaturated\",\n      main: false,\n    },\n    {\n      label: \"Monounsaturated fat\",\n      key: \"Fatty acids, total monounsaturated\",\n      main: false,\n    },\n    { label: \"Water\", key: \"Water\", main: true },\n    { label: \"Cholesterol\", key: \"Cholesterol\", main: true },\n    { label: \"Sodium\", key: \"Sodium, Na\", main: true },\n    { label: \"Potassium\", key: \"Potassium, K\", main: true },\n    {\n      label: \"Total Carbohydrate\",\n      key: \"Carbohydrate, by difference\",\n      main: true,\n    },\n    { label: \"Dietary fiber\", key: \"Fiber, total dietary\", main: false },\n    { label: \"Sugar\", key: \"Sugars, total\", main: false },\n    { label: \"Protein\", key: \"Protein\", main: true },\n  ];\n\n  render() {\n    let nutrients = sortNutrientsByGroup(this.props.report.nutrients);\n    let nutrientGroups = groupByNutrientGroup(nutrients);\n\n    return (\n      <div className=\"Report\">\n        <table className=\"nutTable\">\n          <tbody>\n            {this.tableRows.map((row, index) =>\n              this.tableRow(index, row.key, row.label, row.main)\n            )}\n          </tbody>\n        </table>\n        {nutrientGroups[\"Vitamins\"] &&\n          this.doubleTable(nutrientGroups[\"Vitamins\"])}\n        {nutrientGroups[\"Minerals\"] &&\n          this.doubleTable(nutrientGroups[\"Minerals\"])}\n        {nutrientGroups[\"Other\"] && this.doubleTable(nutrientGroups[\"Other\"])}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  mass: state.app.mass,\n  factor: state.app.mass / 100,\n});\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Report);\n","import React from \"react\";\nimport { css } from \"emotion\";\n\nconst Loading = (props) => {\n  return (\n    <div\n      className={css`\n        margin-top: 2rem;\n        margin-left: 2rem;\n        border: 8px solid #f06292;\n        border-top: 8px solid transparent; /* Blue */\n        border-radius: 50%;\n        width: 80px;\n        height: 80px;\n        animation: spin 1s linear infinite;\n\n        @keyframes spin {\n          0% {\n            transform: rotate(0deg);\n          }\n          100% {\n            transform: rotate(360deg);\n          }\n        }\n      `}\n    >\n      Loading\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport InputRange from \"@material-ui/core/Slider\";\nimport \"react-input-range/lib/css/index.css\";\nimport { get, isUndefined } from \"lodash\";\n\nimport Breadcrumbs from \"./Breadcrumbs\";\nimport Analysis from \"./Analysis\";\nimport Report from \"./Report\";\nimport Loading from \"./Loading\";\n\nimport { getReport, setMass, compareInsert } from \"../actions\";\n\nexport const ReportPage = ({\n  match,\n  report,\n  getReport,\n  compareInsert,\n  setMass,\n  mass,\n  loaded,\n}) => {\n  const { name, ds, manu, ndbno } = get(report, \"desc\", {});\n  const urlNDBNO = match.params.ndbno;\n\n  useEffect(() => {\n    console.log(\"ee\");\n    getReport(urlNDBNO);\n  }, [urlNDBNO, getReport]);\n\n  const sliderPrecision = (() => {\n    if (mass < 25) return 1;\n    if (mass < 100) return 5;\n    if (mass < 500) return 10;\n    return 50;\n  })();\n\n  return (\n    <div className=\"ReportPage\">\n      <div className=\"header\">\n        <div>\n          <h1>\n            {loaded ? `${name}` : `Loading report for ndbno ${urlNDBNO}`}\n            <button onClick={() => compareInsert(ndbno, mass)}>Compare</button>\n          </h1>\n          <div className=\"descriptor\">\n            {loaded && (\n              <small>{[ds, manu, ndbno].filter((e) => e).join(\" · \")}</small>\n            )}\n          </div>\n          {loaded && <Breadcrumbs name={name} />}\n          <Link to=\"/search/\" className=\"newSearchLink\">\n            &#8592; New Search\n          </Link>\n          <InputRange\n            min={0}\n            max={1000}\n            step={sliderPrecision}\n            value={mass}\n            onChange={(_event, value) => setMass(value)}\n            valueLabelFormat={(value) => `Mass ${value} g`}\n          />\n        </div>\n      </div>\n      {loaded ? (\n        <div className=\"ReportPage-container\">\n          <div className=\"ReportPage-report\">\n            <Report report={report} />\n          </div>\n          <div className=\"ReportPage-analysis\">\n            <Analysis report={report} />\n          </div>\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  loaded: !isUndefined(state.app.getReportResult),\n  report: state.app.getReportResult,\n  mass: state.app.mass,\n});\n\nconst mapDispatchToProps = {\n  getReport,\n  setMass,\n  compareInsert,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReportPage);\n"],"sourceRoot":""}